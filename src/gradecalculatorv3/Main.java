package gradecalculatorv3;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author Ethan
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();

        JFrame topFrame = (JFrame) SwingUtilities.getWindowAncestor(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        newClassjPanel2 = new javax.swing.JPanel();
        classNamejTextField1 = new javax.swing.JTextField();
        yearTakenjTextField1 = new javax.swing.JTextField();
        semesterTakenjTextField1 = new javax.swing.JTextField();
        canceljButton5 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        gradesjPanel1 = new javax.swing.JPanel();
        titleList = new java.awt.List();
        currentGradeLabel = new javax.swing.JLabel();
        scoreList = new java.awt.List();
        percentagePointsLabel = new javax.swing.JLabel();
        weightList = new java.awt.List();
        percentCompleteLabel = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        submitChangesToDBjButton2 = new javax.swing.JButton();
        editGradejPanel1 = new javax.swing.JPanel();
        assignmentTitlejTextField1 = new javax.swing.JTextField();
        weightjTextField2 = new javax.swing.JTextField();
        scoreReceivedjTextField3 = new javax.swing.JTextField();
        addChangesjButton5 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        desiredGradejTextField1 = new javax.swing.JTextField();
        assumedGradejTextField2 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        assignmentTitleTextField = new javax.swing.JTextField();
        weightTextField = new javax.swing.JTextField();
        scoreTextField = new javax.swing.JTextField();
        infojLabel1 = new javax.swing.JLabel();
        coursesjPanel1 = new javax.swing.JPanel();
        coursesComboBox = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        semestersComboBox = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        letterGradeTextField1 = new java.awt.TextField();
        label4 = new java.awt.Label();
        letterGradeTextField4 = new java.awt.TextField();
        label5 = new java.awt.Label();
        letterGradeTextField3 = new java.awt.TextField();
        letterGradeTextField5 = new java.awt.TextField();
        hoursTextField6 = new java.awt.TextField();
        letterGradeTextField6 = new java.awt.TextField();
        letterGradeTextField2 = new java.awt.TextField();
        hoursTextField1 = new java.awt.TextField();
        hoursTextField3 = new java.awt.TextField();
        currentGPATextField1 = new java.awt.TextField();
        hoursTextField2 = new java.awt.TextField();
        completedGPAHoursTextField2 = new java.awt.TextField();
        hoursTextField4 = new java.awt.TextField();
        label6 = new java.awt.Label();
        hoursTextField5 = new java.awt.TextField();
        label7 = new java.awt.Label();
        label3 = new java.awt.Label();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        addAClassButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        classesComboBox = new javax.swing.JComboBox<>();
        editButton1 = new javax.swing.JButton();
        classNameTextField = new javax.swing.JTextField();
        editButton2 = new javax.swing.JButton();
        creditsTextField = new javax.swing.JTextField();
        finalGradeTextField = new javax.swing.JTextField();
        semesterTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        hoursTextField7 = new java.awt.TextField();
        hoursTextField8 = new java.awt.TextField();
        hoursTextField9 = new java.awt.TextField();
        hoursTextField10 = new java.awt.TextField();
        hoursTextField11 = new java.awt.TextField();
        hoursTextField12 = new java.awt.TextField();
        label8 = new java.awt.Label();
        label9 = new java.awt.Label();
        letterGradeTextField7 = new java.awt.TextField();
        letterGradeTextField8 = new java.awt.TextField();
        letterGradeTextField9 = new java.awt.TextField();
        letterGradeTextField10 = new java.awt.TextField();
        letterGradeTextField11 = new java.awt.TextField();
        letterGradeTextField12 = new java.awt.TextField();
        label10 = new java.awt.Label();
        completedGPAHoursTextField3 = new java.awt.TextField();
        currentGPATextField2 = new java.awt.TextField();
        label11 = new java.awt.Label();
        label12 = new java.awt.Label();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 0));
        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });
        jTabbedPane1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTabbedPane1FocusGained(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 0));
        jPanel1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jPanel1FocusGained(evt);
            }
        });
        jPanel1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanel1ComponentShown(evt);
            }
        });

        jButton4.setText("Add a Class");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        newClassjPanel2.setBackground(new java.awt.Color(255, 255, 0));

        classNamejTextField1.setText("Class Name (max. 7 characters)");
        classNamejTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                classNamejTextField1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                classNamejTextField1FocusLost(evt);
            }
        });

        yearTakenjTextField1.setText("Year Taken (4 digits)");
        yearTakenjTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                yearTakenjTextField1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                yearTakenjTextField1FocusLost(evt);
            }
        });

        semesterTakenjTextField1.setText("Semester Taken");
        semesterTakenjTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                semesterTakenjTextField1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                semesterTakenjTextField1FocusLost(evt);
            }
        });

        javax.swing.GroupLayout newClassjPanel2Layout = new javax.swing.GroupLayout(newClassjPanel2);
        newClassjPanel2.setLayout(newClassjPanel2Layout);
        newClassjPanel2Layout.setHorizontalGroup(
            newClassjPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newClassjPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(newClassjPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(classNamejTextField1)
                    .addComponent(yearTakenjTextField1)
                    .addComponent(semesterTakenjTextField1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        newClassjPanel2Layout.setVerticalGroup(
            newClassjPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newClassjPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(classNamejTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(yearTakenjTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(semesterTakenjTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        canceljButton5.setText("CANCEL");
        canceljButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                canceljButton5ActionPerformed(evt);
            }
        });

        jButton3.setText("Add a New Grade");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        gradesjPanel1.setBackground(new java.awt.Color(255, 255, 0));

        titleList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                titleListMouseClicked(evt);
            }
        });
        titleList.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                titleListFocusGained(evt);
            }
        });
        titleList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                titleListActionPerformed(evt);
            }
        });

        currentGradeLabel.setText("Current grade:");

        scoreList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                scoreListMouseClicked(evt);
            }
        });

        percentagePointsLabel.setText("Percentage points earned: ");

        weightList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                weightListMouseClicked(evt);
            }
        });

        percentCompleteLabel.setText("Percent complete: ");

        jButton2.setText("Delete Assignment");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        submitChangesToDBjButton2.setText("Submit Changes to Database");
        submitChangesToDBjButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitChangesToDBjButton2ActionPerformed(evt);
            }
        });

        editGradejPanel1.setBackground(new java.awt.Color(255, 255, 0));

        assignmentTitlejTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                assignmentTitlejTextField1KeyReleased(evt);
            }
        });

        addChangesjButton5.setText("Submit");
        addChangesjButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addChangesjButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout editGradejPanel1Layout = new javax.swing.GroupLayout(editGradejPanel1);
        editGradejPanel1.setLayout(editGradejPanel1Layout);
        editGradejPanel1Layout.setHorizontalGroup(
            editGradejPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editGradejPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(assignmentTitlejTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(weightjTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scoreReceivedjTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addChangesjButton5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        editGradejPanel1Layout.setVerticalGroup(
            editGradejPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editGradejPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editGradejPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignmentTitlejTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(weightjTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scoreReceivedjTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addChangesjButton5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton5.setText("Calculate");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel8.setText("Grade I would like in this course:");

        jLabel9.setText("What if I make this grade on remaining asignments?");

        jLabel12.setText("Title");

        jLabel13.setText("Weight");

        jLabel14.setText("Grade");

        javax.swing.GroupLayout gradesjPanel1Layout = new javax.swing.GroupLayout(gradesjPanel1);
        gradesjPanel1.setLayout(gradesjPanel1Layout);
        gradesjPanel1Layout.setHorizontalGroup(
            gradesjPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gradesjPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editGradejPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(gradesjPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(gradesjPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titleList, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(gradesjPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(weightList, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addGap(1, 1, 1)
                .addGroup(gradesjPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(gradesjPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(gradesjPanel1Layout.createSequentialGroup()
                        .addComponent(scoreList, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(gradesjPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(submitChangesToDBjButton2)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(119, 119, 119))))
            .addGroup(gradesjPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(gradesjPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(percentCompleteLabel)
                    .addComponent(percentagePointsLabel)
                    .addComponent(currentGradeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(gradesjPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gradesjPanel1Layout.createSequentialGroup()
                        .addComponent(jButton5)
                        .addGap(22, 22, 22))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gradesjPanel1Layout.createSequentialGroup()
                        .addGroup(gradesjPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addGroup(gradesjPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(assumedGradejTextField2)
                            .addComponent(desiredGradejTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(46, 46, 46))
        );
        gradesjPanel1Layout.setVerticalGroup(
            gradesjPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gradesjPanel1Layout.createSequentialGroup()
                .addGroup(gradesjPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(gradesjPanel1Layout.createSequentialGroup()
                        .addGroup(gradesjPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14))
                        .addGap(7, 7, 7)
                        .addGroup(gradesjPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scoreList, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(weightList, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(titleList, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(gradesjPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jButton2)
                        .addGap(7, 7, 7)
                        .addComponent(submitChangesToDBjButton2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(editGradejPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(gradesjPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(gradesjPanel1Layout.createSequentialGroup()
                        .addComponent(currentGradeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(percentagePointsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(percentCompleteLabel)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gradesjPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(gradesjPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(desiredGradejTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGap(9, 9, 9)
                        .addGroup(gradesjPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(assumedGradejTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton5))))
        );

        assignmentTitleTextField.setText("Assignment Title");
        assignmentTitleTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                assignmentTitleTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                assignmentTitleTextFieldFocusLost(evt);
            }
        });
        assignmentTitleTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                assignmentTitleTextFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                assignmentTitleTextFieldKeyReleased(evt);
            }
        });

        weightTextField.setText("Weight (%)");
        weightTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                weightTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                weightTextFieldFocusLost(evt);
            }
        });

        scoreTextField.setText("Score (%)");
        scoreTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                scoreTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                scoreTextFieldFocusLost(evt);
            }
        });

        infojLabel1.setFont(new java.awt.Font("Tahoma", 2, 16)); // NOI18N
        infojLabel1.setText("Enter information for a new grade in above text fields");

        coursesjPanel1.setBackground(new java.awt.Color(255, 255, 0));

        coursesComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                coursesComboBoxItemStateChanged(evt);
            }
        });

        jLabel10.setText("Courses:");

        jLabel11.setText("Semesters:");

        semestersComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                semestersComboBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout coursesjPanel1Layout = new javax.swing.GroupLayout(coursesjPanel1);
        coursesjPanel1.setLayout(coursesjPanel1Layout);
        coursesjPanel1Layout.setHorizontalGroup(
            coursesjPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(coursesjPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(coursesjPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(coursesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(semestersComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        coursesjPanel1Layout.setVerticalGroup(
            coursesjPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, coursesjPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(semestersComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(coursesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(canceljButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 772, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(333, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(newClassjPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(coursesjPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(34, 34, 34)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jButton3)
                                    .addGap(1, 1, 1)
                                    .addComponent(assignmentTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(weightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(scoreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(348, 348, 348))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(47, 47, 47)
                                    .addComponent(infojLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(gradesjPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 721, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 225, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(498, Short.MAX_VALUE)
                .addComponent(canceljButton5)
                .addGap(27, 27, 27))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(10, 10, 10)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(gradesjPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton3)
                                .addComponent(assignmentTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(weightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(scoreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(infojLabel1))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(coursesjPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jButton4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(newClassjPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addContainerGap(69, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("Grades", jPanel1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 102));
        jPanel2.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanel2ComponentShown(evt);
            }
        });

        letterGradeTextField1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        letterGradeTextField1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N

        label4.setFont(new java.awt.Font("Dialog", 2, 14)); // NOI18N
        label4.setText("Hours");

        letterGradeTextField4.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N

        label5.setFont(new java.awt.Font("Dialog", 3, 14)); // NOI18N
        label5.setText("Below, enter grades for future classes to see how they might affect your GPA.");

        letterGradeTextField3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N

        letterGradeTextField5.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N

        hoursTextField6.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        hoursTextField6.setText("3.0");

        letterGradeTextField6.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N

        letterGradeTextField2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N

        hoursTextField1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        hoursTextField1.setText("3.0");

        hoursTextField3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        hoursTextField3.setText("3.0");

        currentGPATextField1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        currentGPATextField1.setText("3.72");

        hoursTextField2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        hoursTextField2.setText("3.0");

        completedGPAHoursTextField2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        completedGPAHoursTextField2.setText("90");

        hoursTextField4.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        hoursTextField4.setText("3.0");

        label6.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label6.setText("Your Current GPA:");

        hoursTextField5.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        hoursTextField5.setText("3.0");

        label7.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label7.setText("Your graded credit hours:");

        label3.setFont(new java.awt.Font("Dialog", 2, 14)); // NOI18N
        label3.setText("Letter Grade Received");

        jButton1.setText("Calculate");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(completedGPAHoursTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(110, 110, 110)
                                    .addComponent(currentGPATextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(label3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(letterGradeTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(letterGradeTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(letterGradeTextField4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(letterGradeTextField5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(letterGradeTextField6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(letterGradeTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(hoursTextField6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(hoursTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(hoursTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(hoursTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(hoursTextField4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(hoursTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(181, 181, 181)
                        .addComponent(jButton1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(497, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(currentGPATextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(completedGPAHoursTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hoursTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(letterGradeTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(hoursTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hoursTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(letterGradeTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(letterGradeTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(letterGradeTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hoursTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(hoursTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(letterGradeTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(hoursTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(letterGradeTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(jButton1)
                .addContainerGap(93, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("GPA", jPanel2);

        jPanel3.setBackground(new java.awt.Color(255, 255, 102));
        jPanel3.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanel3ComponentShown(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel3.setText("Semester:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel4.setText("Credits:");

        addAClassButton.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        addAClassButton.setText("Add a Class");
        addAClassButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAClassButtonActionPerformed(evt);
            }
        });

        deleteButton.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        deleteButton.setText("Delete Class");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        classesComboBox.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        classesComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        classesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classesComboBoxActionPerformed(evt);
            }
        });

        editButton1.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        editButton1.setText("Edit Class");
        editButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButton1ActionPerformed(evt);
            }
        });

        classNameTextField.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        classNameTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                classNameTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                classNameTextFieldFocusLost(evt);
            }
        });
        classNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                classNameTextFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                classNameTextFieldKeyReleased(evt);
            }
        });

        editButton2.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        editButton2.setText("Quit");
        editButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButton2ActionPerformed(evt);
            }
        });

        creditsTextField.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        creditsTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                creditsTextFieldFocusGained(evt);
            }
        });
        creditsTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                creditsTextFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                creditsTextFieldKeyReleased(evt);
            }
        });

        finalGradeTextField.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        finalGradeTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                finalGradeTextFieldFocusGained(evt);
            }
        });
        finalGradeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                finalGradeTextFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                finalGradeTextFieldKeyReleased(evt);
            }
        });

        semesterTextField.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel2.setText("Class name:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel6.setText("Final grade:");

        jButton6.setText("Calculate");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        hoursTextField7.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        hoursTextField7.setText("3.0");

        hoursTextField8.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        hoursTextField8.setText("3.0");

        hoursTextField9.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        hoursTextField9.setText("3.0");

        hoursTextField10.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        hoursTextField10.setText("3.0");

        hoursTextField11.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        hoursTextField11.setText("3.0");

        hoursTextField12.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        hoursTextField12.setText("3.0");

        label8.setFont(new java.awt.Font("Dialog", 2, 14)); // NOI18N
        label8.setText("Hours");

        label9.setFont(new java.awt.Font("Dialog", 2, 14)); // NOI18N
        label9.setText("Letter Grade Received");

        letterGradeTextField7.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        letterGradeTextField7.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N

        letterGradeTextField8.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N

        letterGradeTextField9.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N

        letterGradeTextField10.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N

        letterGradeTextField11.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N

        letterGradeTextField12.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N

        label10.setFont(new java.awt.Font("Dialog", 3, 14)); // NOI18N
        label10.setText("Below, enter grades for future classes to see how they might affect your GPA.");

        completedGPAHoursTextField3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        completedGPAHoursTextField3.setText("90");

        currentGPATextField2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        currentGPATextField2.setText("3.72");

        label11.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label11.setText("Your Current GPA:");

        label12.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label12.setText("Your graded credit hours:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(classesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel2))
                                .addGap(36, 36, 36)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(finalGradeTextField)
                                    .addComponent(semesterTextField)
                                    .addComponent(creditsTextField)
                                    .addComponent(classNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(170, 170, 170)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addAClassButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(editButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(editButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addComponent(label12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(completedGPAHoursTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addComponent(label11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(110, 110, 110)
                                    .addComponent(currentGPATextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(label9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(letterGradeTextField7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(letterGradeTextField9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(letterGradeTextField10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(letterGradeTextField11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(letterGradeTextField12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(letterGradeTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(hoursTextField7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(label8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(hoursTextField12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(hoursTextField11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(hoursTextField10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(hoursTextField9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(hoursTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(162, 162, 162)
                        .addComponent(jButton6))
                    .addComponent(label10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(70, 70, 70))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(classesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(classNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(creditsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(finalGradeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(semesterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addAClassButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editButton2))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(currentGPATextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(completedGPAHoursTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addComponent(label10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hoursTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(letterGradeTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(hoursTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hoursTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(letterGradeTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(letterGradeTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(letterGradeTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hoursTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(hoursTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(letterGradeTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(hoursTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(letterGradeTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addComponent(jButton6)))
                .addContainerGap(78, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Finished Courses", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1047, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 588, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTabbedPane1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTabbedPane1FocusGained
        // also, recalculate GPA
        letterGradeTextField2.requestFocusInWindow();  //Set cursor to blinking in this text field.

        // show completed credit hours
        double credits = getTotalCreditHours();
        completedGPAHoursTextField3.setText("" + credits);

        double gpa = getGPA();

        // format to 3 decimal places
        gpa = Math.round(gpa * 1000.0) / 1000.0;

        currentGPATextField2.setText("" + gpa);
    }//GEN-LAST:event_jTabbedPane1FocusGained

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged

    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void jPanel3ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel3ComponentShown

        classNameTextField.setEditable(false);
        finalGradeTextField.setEditable(false);
        semesterTextField.setEditable(false);
        creditsTextField.setEditable(false);

        getAllSemestersAndCourses();
    }//GEN-LAST:event_jPanel3ComponentShown

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void finalGradeTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_finalGradeTextFieldKeyReleased
        /*
        // The grade has been entered. Move on.
        if (finalGradeTextField.getText().length() == 1) {
            semesterTextField.requestFocusInWindow();
        }
         */
    }//GEN-LAST:event_finalGradeTextFieldKeyReleased

    private void finalGradeTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_finalGradeTextFieldKeyPressed

    }//GEN-LAST:event_finalGradeTextFieldKeyPressed

    private void finalGradeTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_finalGradeTextFieldFocusGained

    }//GEN-LAST:event_finalGradeTextFieldFocusGained

    private void creditsTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_creditsTextFieldKeyReleased
        /*
        if (creditsTextField.getText().length() == 1) {
            finalGradeTextField.requestFocusInWindow();
        }
         */
    }//GEN-LAST:event_creditsTextFieldKeyReleased

    private void creditsTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_creditsTextFieldKeyPressed

    }//GEN-LAST:event_creditsTextFieldKeyPressed

    private void creditsTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_creditsTextFieldFocusGained
        if (creditsTextField.getText().length() == 1) {
            creditsTextField.setText("");
        }
    }//GEN-LAST:event_creditsTextFieldFocusGained

    private void editButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButton2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_editButton2ActionPerformed

    private void classNameTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_classNameTextFieldKeyReleased
        /*
        // the entire name has been entered; move on to next textfield
        if (classNameTextField.getText().toString().length() == 6) {
            creditsTextField.requestFocusInWindow();
        }
         */
    }//GEN-LAST:event_classNameTextFieldKeyReleased

    private void classNameTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_classNameTextFieldKeyPressed

    }//GEN-LAST:event_classNameTextFieldKeyPressed

    private void classNameTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_classNameTextFieldFocusGained

    }//GEN-LAST:event_classNameTextFieldFocusGained

    private void editButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButton1ActionPerformed
        if (editButton1.getText().equals("Edit Class")) {
            editButton1.setText("Submit Changes");
            addAClassButton.setVisible(false);
            classesComboBox.setVisible(false);
            deleteButton.setText("Cancel");

            classNameTextField.requestFocusInWindow();
            classNameTextField.setEditable(true);
            finalGradeTextField.setEditable(true);
            semesterTextField.setEditable(true);
            creditsTextField.setEditable(true);

        } else {
            // Try submitting changes to database.
            try {

                if (finalGradeTextField.getText().length() > 1) {
                    JOptionPane.showMessageDialog(null, "Invalid final grade. Must contain one or fewer characters.");
                    return;
                }
                try {
                    Double.parseDouble(creditsTextField.getText());
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Check credits that you entered. Must be a double or integer.");
                    return;
                }

                // Make sure there is exactly one space in entire input.
                String semesterTextFieldText = semesterTextField.getText().toString();
                int spaceCount = 0;
                for (int i = 0; i < semesterTextField.getText().length(); i++) {
                    if (semesterTextFieldText.charAt(i) == ' ') {
                        spaceCount++;
                    }
                }
                if (spaceCount != 1) {
                    JOptionPane.showMessageDialog(null, "The semester you took the class must contain exactly one space, for example: \nFall 2015, summer 2011, spring_term_a 2013.");
                    return;
                }

                // SQLite connection string
                String url = "jdbc:sqlite:" + getAbsolutePath();

                String oldWholeSemester = classesComboBox.getSelectedItem().toString();
                String oldTitle = oldWholeSemester.substring(0, oldWholeSemester.indexOf(" "));
                String oldSemester = oldWholeSemester.substring(oldWholeSemester.indexOf("-") + 2, oldWholeSemester.lastIndexOf(" "));
                int oldYear = Integer.parseInt(oldWholeSemester.substring(oldWholeSemester.lastIndexOf(" ") + 1));

                String wholeSemester = semesterTextField.getText();
                String semester = wholeSemester.substring(0, wholeSemester.indexOf(" "));
                int year = Integer.parseInt(wholeSemester.substring(wholeSemester.indexOf(" ") + 1));

                String sql = "UPDATE course SET title = '" + classNameTextField.getText().toUpperCase() + "', credits = " + creditsTextField.getText() + ", final_grade = '" + finalGradeTextField.getText().toUpperCase() + "', semester_taken = '" + semester.toUpperCase()
                        + "', year_taken = " + year + " WHERE id = " + getCourseID(oldTitle, oldSemester, oldYear) + ";";

                try (Connection conn = connectToCollege(); PreparedStatement pstmt = conn.prepareStatement(sql);) {
                    pstmt.executeUpdate();
                    conn.close();
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, e);
                }

                editButton1.setText("Edit Class");
                addAClassButton.setVisible(true);
                classesComboBox.addItem(classNameTextField.getText().toUpperCase() + " - " + semester.toUpperCase() + " " + year);
                classesComboBox.removeItemAt(classesComboBox.getSelectedIndex());
                classesComboBox.setSelectedIndex(classesComboBox.getItemCount() - 1);
                JOptionPane.showMessageDialog(this,
                        "Successfully modified the class.",
                        "Class Added",
                        JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);  // Show the exception message.
                classesComboBox.setSelectedIndex(0);
            }

            classesComboBox.setVisible(true);
            deleteButton.setText("Delete Class");
            addAClassButton.setText("Add a Class");
            classNameTextField.setEditable(false);
            finalGradeTextField.setEditable(false);
            semesterTextField.setEditable(false);
            creditsTextField.setEditable(false);

            // also, recalculate GPA
            letterGradeTextField2.requestFocusInWindow();  //Set cursor to blinking in this text field.

            // show completed credit hours
            double credits = getTotalCreditHours();
            completedGPAHoursTextField3.setText("" + credits);

            double gpa = getGPA();

            // format to 3 decimal places
            gpa = Math.round(gpa * 1000.0) / 1000.0;

            currentGPATextField2.setText("" + gpa);

        }
    }//GEN-LAST:event_editButton1ActionPerformed

    private void classesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classesComboBoxActionPerformed
        try {
            String course = classesComboBox.getSelectedItem().toString();
            String title = course.substring(0, course.indexOf("-") - 1);
            String semester = course.substring(course.indexOf("-") + 2, course.lastIndexOf(" "));
            int year = Integer.parseInt(course.substring(course.lastIndexOf(" ") + 1));

            getInfoAboutCourse(title, semester, year);
        } catch (NullPointerException npe) {
            System.out.println("NullPointerException: " + npe);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Problem trying to get info about a course: " + e);  // Show the exception message.
        }
    }//GEN-LAST:event_classesComboBoxActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if (deleteButton.getText().equals("Cancel")) {  //canceling out of adding a class
            if (classesComboBox.getItemCount() == 0) {
                deleteButton.setVisible(false);
                editButton1.setVisible(false);

            } else {
                editButton1.setVisible(true);
            }
            editButton1.setText("Edit Class");
            classesComboBox.setVisible(true);
            deleteButton.setText("Delete Class");
            addAClassButton.setText("Add a Class");
            addAClassButton.setVisible(true);
            classNameTextField.setEditable(false);
            finalGradeTextField.setEditable(false);
            semesterTextField.setEditable(false);
            creditsTextField.setEditable(false);
            classesComboBox.setSelectedIndex(0);
        } else if (classesComboBox.getItemCount() > 0 && JOptionPane.showConfirmDialog(null, "Are you sure you would like to delete the course?", "Confirm",
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            String course = classesComboBox.getSelectedItem().toString();
            String title = course.substring(0, course.indexOf("-") - 1);
            String semester = course.substring(course.indexOf("-") + 2, course.lastIndexOf(" "));
            int year = Integer.parseInt(course.substring(course.lastIndexOf(" ") + 1));

            // remove it from the database
            String url = "jdbc:sqlite:" + getAbsolutePath();

            // First remove assignments for course to be deleted.
            String sql = "DELETE FROM assignment WHERE course_id = " + getCourseID(title, semester, year) + ";";

            try (Connection conn = connectToCollege(); PreparedStatement pstmt = conn.prepareStatement(sql);) {
                pstmt.executeUpdate();
            } catch (SQLException e) {
                System.out.println(e);
            }

            // Now delete the course in the course table.
            sql = "DELETE FROM course WHERE id = " + getCourseID(title, semester, year) + ";";

            try (Connection conn = connectToCollege(); PreparedStatement pstmt = conn.prepareStatement(sql);) {
                pstmt.executeUpdate();
                conn.close();
            } catch (SQLException e) {
                System.out.println(e);
            }

            classesComboBox.removeItemAt(classesComboBox.getSelectedIndex());

            if (classesComboBox.getItemCount() == 0) {
                deleteButton.setVisible(false);
                editButton1.setVisible(false);
                // Null out text fields
                classNameTextField.setText("");
                finalGradeTextField.setText("");
                semesterTextField.setText("");
                creditsTextField.setText("");
            }

            // also, recalculate GPA
            letterGradeTextField2.requestFocusInWindow();  //Set cursor to blinking in this text field.

            // show completed credit hours
            double credits = getTotalCreditHours();
            completedGPAHoursTextField3.setText("" + credits);

            double gpa = getGPA();

            // format to 3 decimal places
            gpa = Math.round(gpa * 1000.0) / 1000.0;

            currentGPATextField2.setText("" + gpa);

            JOptionPane.showMessageDialog(null, "Successfully deleted the class!");  // Show the exception message.

        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void addAClassButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAClassButtonActionPerformed
        if (addAClassButton.getText().equals("Add a Class")) {
            classesComboBox.setVisible(false);
            addAClassButton.setText("Submit");
            deleteButton.setVisible(true);
            deleteButton.setText("Cancel");
            classNameTextField.setText("");
            finalGradeTextField.setText("");
            semesterTextField.setText("");
            creditsTextField.setText("");
            editButton1.setVisible(false);
            classNameTextField.requestFocusInWindow();
            addAClassButton.setText("Submit");
            classNameTextField.setEditable(true);
            finalGradeTextField.setEditable(true);
            semesterTextField.setEditable(true);
            creditsTextField.setEditable(true);

        } else {
            // Try submitting to database.
            try {
                // SQLite connection string
                String url = "jdbc:sqlite:" + getAbsolutePath();
                String wholeSemester = "";
                String semester = "";
                int year = -1;
                try {

                    // Error checking.
                    wholeSemester = semesterTextField.getText();
                    if (wholeSemester.contains("-")) {
                        JOptionPane.showMessageDialog(null, "Semester cannot contain dashes or hyphens.");
                        return;
                    }
                    if (finalGradeTextField.getText().length() > 1) {
                        JOptionPane.showMessageDialog(null, "Invalid final grade. Must contain one or fewer characters.");
                        return;
                    }
                    try {
                        Double.parseDouble(creditsTextField.getText());
                    } catch (NumberFormatException nfe) {
                        JOptionPane.showMessageDialog(null, "Check credits that you entered. Must be a double or integer.");
                        return;
                    }
                    // Make sure there is exactly one space in entire input.
                    String semesterTextFieldText = semesterTextField.getText().toString();
                    int spaceCount = 0;
                    for (int i = 0; i < semesterTextField.getText().length(); i++) {
                        if (semesterTextFieldText.charAt(i) == ' ') {
                            spaceCount++;
                        }
                    }
                    if (spaceCount != 1) {
                        JOptionPane.showMessageDialog(null, "The semester you took the class must contain exactly one space, for example: \nFall 2015, summer 2011, spring_term_a 2013.");
                        return;
                    }

                    semester = wholeSemester.substring(0, wholeSemester.indexOf(" "));
                    year = Integer.parseInt(wholeSemester.substring(wholeSemester.indexOf(" ") + 1));
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Be sure your semester is of correct format." + e + "\nExample correct formats: fall 2018, summer 2020, spring_session_a 2021");
                }
                String sql = "INSERT INTO course(title, credits, semester_taken, year_taken, final_grade) VALUES('" + classNameTextField.getText().toUpperCase() + "', " + creditsTextField.getText() + ", '" + semester.toUpperCase() + "', " + year + ", '" + finalGradeTextField.getText().toUpperCase() + "');";
                try (Connection conn = connectToCollege(); PreparedStatement pstmt = conn.prepareStatement(sql);) {
                    pstmt.executeUpdate();
                    conn.close();
                } catch (SQLException e) {
                    System.out.println(e);
                }

                deleteButton.setVisible(true);
                classNameTextField.setText(classNameTextField.getText().toUpperCase());
                finalGradeTextField.setText(finalGradeTextField.getText().toUpperCase());
                semesterTextField.setText(semesterTextField.getText().toUpperCase());

                classesComboBox.addItem(classNameTextField.getText().toUpperCase() + " - " + semester.toUpperCase() + " " + year);
                classesComboBox.setSelectedIndex(classesComboBox.getItemCount() - 1);
                JOptionPane.showMessageDialog(this,
                        "Successfully added the class.",
                        "Class Added",
                        JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);  // Show the exception message.
                classesComboBox.setSelectedIndex(0);
            }

            editButton1.setVisible(true);
            classesComboBox.setVisible(true);
            deleteButton.setText("Delete Class");
            addAClassButton.setText("Add a Class");
            classNameTextField.setEditable(false);
            finalGradeTextField.setEditable(false);
            semesterTextField.setEditable(false);
            creditsTextField.setEditable(false);

            // also, recalculate GPA
            letterGradeTextField2.requestFocusInWindow();  //Set cursor to blinking in this text field.

            // show completed credit hours
            double credits = getTotalCreditHours();
            completedGPAHoursTextField3.setText("" + credits);

            double gpa = getGPA();

            // format to 3 decimal places
            gpa = Math.round(gpa * 1000.0) / 1000.0;

            currentGPATextField2.setText("" + gpa);
        }
    }//GEN-LAST:event_addAClassButtonActionPerformed

    private void jPanel2ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel2ComponentShown
        letterGradeTextField1.requestFocusInWindow();  //Set cursor to blinking in this text field.

        // show completed credit hours
        double credits = getTotalCreditHours();
        completedGPAHoursTextField2.setText("" + credits);

        double gpa = getGPA();

        // format to 3 decimal places
        gpa = Math.round(gpa * 1000.0) / 1000.0;

        currentGPATextField1.setText("" + gpa);
    }//GEN-LAST:event_jPanel2ComponentShown

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            double qualityPoints = Double.parseDouble(currentGPATextField1.getText()) * Double.parseDouble(completedGPAHoursTextField2.getText());
            double totalHours = Double.parseDouble(completedGPAHoursTextField2.getText());

            if (!letterGradeTextField1.getText().equals("") && !hoursTextField1.getText().equals("")) {
                totalHours += Double.parseDouble(hoursTextField1.getText());
                qualityPoints += calculateQualityPoints(letterGradeTextField1.getText().charAt(0), Double.parseDouble(hoursTextField1.getText()));
            }
            if (!letterGradeTextField2.getText().equals("") && !hoursTextField2.getText().equals("")) {
                totalHours += Double.parseDouble(hoursTextField2.getText());
                qualityPoints += calculateQualityPoints(letterGradeTextField2.getText().charAt(0), Double.parseDouble(hoursTextField2.getText()));
            }
            if (!letterGradeTextField3.getText().equals("") && !hoursTextField3.getText().equals("")) {
                totalHours += Double.parseDouble(hoursTextField3.getText());
                qualityPoints += calculateQualityPoints(letterGradeTextField3.getText().charAt(0), Double.parseDouble(hoursTextField3.getText()));
            }
            if (!letterGradeTextField4.getText().equals("") && !hoursTextField4.getText().equals("")) {
                totalHours += Double.parseDouble(hoursTextField4.getText());
                qualityPoints += calculateQualityPoints(letterGradeTextField4.getText().charAt(0), Double.parseDouble(hoursTextField4.getText()));
            }
            if (!letterGradeTextField5.getText().equals("") && !hoursTextField5.getText().equals("")) {
                totalHours += Double.parseDouble(hoursTextField5.getText());
                qualityPoints += calculateQualityPoints(letterGradeTextField5.getText().charAt(0), Double.parseDouble(hoursTextField5.getText()));
            }
            if (!letterGradeTextField6.getText().equals("") && !hoursTextField6.getText().equals("")) {
                totalHours += Double.parseDouble(hoursTextField6.getText());
                qualityPoints += calculateQualityPoints(letterGradeTextField6.getText().charAt(0), Double.parseDouble(hoursTextField6.getText()));
            }
            //Now, show the results.
            NumberFormat formatter = new DecimalFormat("#0.00");
            JOptionPane.showMessageDialog(this, "Given the grades you've entered, your GPA will be: " + formatter.format(qualityPoints / totalHours), "Results", JOptionPane.INFORMATION_MESSAGE);
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this, "Something is wrong with your input.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jPanel1ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel1ComponentShown
        ArrayList<String> semesters = getSemesters();
        if (semesters.size() == 0) {
            coursesjPanel1.setVisible(false);
            jButton3.setVisible(false);
        } else {  // There were semesters.
            for (int i = 0; i < semesters.size(); i++) {
                semestersComboBox.addItem(semesters.get(i));
            }
        }

        calculateOverallGrade();
        calculateOverallPercentagePoints();
        calculatePercentageComplete();

        newClassjPanel2.setVisible(false);
        infojLabel1.setVisible(false);
        editGradejPanel1.setVisible(false);
        assignmentTitleTextField.setVisible(false);
        weightTextField.setVisible(false);
        scoreTextField.setVisible(false);
        submitChangesToDBjButton2.setVisible(false);
    }//GEN-LAST:event_jPanel1ComponentShown

    private void jPanel1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPanel1FocusGained

    }//GEN-LAST:event_jPanel1FocusGained

    private void semestersComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_semestersComboBoxItemStateChanged
        try {
            coursesComboBox.removeAllItems();
            String wholeSemester = semestersComboBox.getSelectedItem().toString();
            String semester = wholeSemester.substring(0, wholeSemester.indexOf(" "));
            int year = Integer.parseInt(wholeSemester.substring(wholeSemester.indexOf(" ") + 1));

            ArrayList<String> courses = getCoursesBySemester(semester, year);
            for (int i = 0; i < courses.size(); i++) {
                coursesComboBox.addItem(courses.get(i));
            }
        } catch (NullPointerException npe) {
            // Do nothing - exception likely caused by nothing being in the combo box.
        }
    }//GEN-LAST:event_semestersComboBoxItemStateChanged

    private void coursesComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_coursesComboBoxItemStateChanged
        // Fetch all the grades for the selected course.
        try {
            // reset any grade data that was in the editing textfields.
            assignmentTitlejTextField1.setText("");
            weightjTextField2.setText("");
            scoreReceivedjTextField3.setText("");
            editGradejPanel1.setVisible(false);
            submitChangesToDBjButton2.setVisible(true);

            // Every course is a unique combination of its title, semester_taken, and year_taken.
            String title = coursesComboBox.getSelectedItem().toString();
            String wholeSemester = semestersComboBox.getSelectedItem().toString();
            String semesterTaken = wholeSemester.substring(0, wholeSemester.indexOf(" "));
            int yearTaken = Integer.parseInt(wholeSemester.substring(wholeSemester.indexOf(" ") + 1));

            String sql = "SELECT title, weight, grade FROM assignment WHERE course_id = (SELECT id FROM course WHERE title = '" + title + "' AND semester_taken = '" + semesterTaken + "' AND year_taken = " + yearTaken + ");";
            ArrayList<String> courses = new ArrayList<String>();
            try (Connection conn = connectToCollege();
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery(sql)) {

                // First, clear the lists from any previous grades in them.
                titleList.removeAll();
                weightList.removeAll();
                scoreList.removeAll();

                while (rs.next()) {
                    titleList.add(rs.getString(1));
                    weightList.add(rs.getString(2));
                    scoreList.add(rs.getString(3));
                }

                // Recalculate grade info.
                calculateOverallGrade();
                calculateOverallPercentagePoints();
                calculatePercentageComplete();

                conn.close();
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }
        } catch (NullPointerException e) {
            System.out.println("NullPointerException: " + e);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "There was an error trying to fetch grades for the course: " + e, "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_coursesComboBoxItemStateChanged

    private void scoreTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_scoreTextFieldFocusLost
        if (scoreTextField.getText().equals("") && scoreList.getSelectedIndex() == -1) {
            scoreTextField.setText("Score (%)");
        }
    }//GEN-LAST:event_scoreTextFieldFocusLost

    private void scoreTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_scoreTextFieldFocusGained
        if (scoreTextField.getText().equals("Score (%)")) {
            scoreTextField.setText("");
        }
    }//GEN-LAST:event_scoreTextFieldFocusGained

    private void weightTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_weightTextFieldFocusLost
        if (weightTextField.getText().equals("") && weightList.getSelectedIndex() == -1) {
            weightTextField.setText("Weight (%)");
        }
    }//GEN-LAST:event_weightTextFieldFocusLost

    private void weightTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_weightTextFieldFocusGained
        if (weightTextField.getText().equals("Weight (%)")) {
            weightTextField.setText("");
        }
    }//GEN-LAST:event_weightTextFieldFocusGained

    private void assignmentTitleTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_assignmentTitleTextFieldKeyReleased
        if (titleList.getSelectedIndex() == -1) {
            jButton3.setVisible(true);
        }
    }//GEN-LAST:event_assignmentTitleTextFieldKeyReleased

    private void assignmentTitleTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_assignmentTitleTextFieldKeyPressed

    }//GEN-LAST:event_assignmentTitleTextFieldKeyPressed

    private void assignmentTitleTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_assignmentTitleTextFieldFocusLost
        if (assignmentTitleTextField.getText().equals("") && titleList.getSelectedIndex() == -1) {
            assignmentTitleTextField.setText("Assignment Title");
        }
    }//GEN-LAST:event_assignmentTitleTextFieldFocusLost

    private void assignmentTitleTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_assignmentTitleTextFieldFocusGained
        if (assignmentTitleTextField.getText().equals("Assignment Title")) {
            assignmentTitleTextField.setText("");
        }
    }//GEN-LAST:event_assignmentTitleTextFieldFocusGained

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if ((stringIsANumber(desiredGradejTextField1.getText()) || desiredGradejTextField1.getText().equals("")) && (stringIsANumber(assumedGradejTextField2.getText()) || assumedGradejTextField2.getText().equals(""))) {
            String necessaryScoreMessage = "";
            if (!desiredGradejTextField1.getText().equals("")) {
                double necessaryScore = (Double.parseDouble(desiredGradejTextField1.getText()) / 100.0 - calculateOverallPercentagePoints() / 100.0) / (1.00 - calculatePercentageComplete() / 100.0);
                necessaryScore = ((int) (necessaryScore * 1000.0) / 10.0);
                necessaryScoreMessage = "In order to get " + desiredGradejTextField1.getText() + "% overall in the course, you will need " + necessaryScore + "% on remaining assignments.";
            }

            String finalGradeMessage = "";
            if (!assumedGradejTextField2.getText().equals("")) {
                // Now calculate what grade the user will have overall, assuming he/she makes a specified score on remaining assignments.
                double finalGrade = (Double.parseDouble(assumedGradejTextField2.getText())) / 100.0 * (1.0 - calculatePercentageComplete() / 100.0) + calculateOverallPercentagePoints() / 100.0;
                finalGrade = ((int) (finalGrade * 1000.0)) / 10.0;
                finalGradeMessage = "If you make " + assumedGradejTextField2.getText() + "% on remaining coursework, you will have " + finalGrade + "% overall.";
            }
            if (!necessaryScoreMessage.equals("") || !finalGradeMessage.equals("")) {
                JOptionPane.showMessageDialog(null, necessaryScoreMessage + "\n" + finalGradeMessage, "Results", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Incorrect input. Must be doubles.", "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void addChangesjButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addChangesjButton5ActionPerformed
        if (stringIsANumber(weightjTextField2.getText()) && stringIsANumber(scoreReceivedjTextField3.getText()) && gradeTitleDoesNotExist(assignmentTitlejTextField1.getText()) && !assignmentTitlejTextField1.getText().equals("") && !weightjTextField2.getText().equals("") && !scoreReceivedjTextField3.getText().equals("")) {
            // First, delete whatever is being edited.
            titleList.remove(titleList.getSelectedIndex());
            weightList.remove(weightList.getSelectedIndex());
            scoreList.remove(scoreList.getSelectedIndex());

            titleList.add(assignmentTitlejTextField1.getText());
            weightList.add(weightjTextField2.getText());
            scoreList.add(scoreReceivedjTextField3.getText());

            assignmentTitlejTextField1.setText("");
            weightjTextField2.setText("");
            scoreReceivedjTextField3.setText("");
            editGradejPanel1.setVisible(false);
            submitChangesToDBjButton2.setVisible(true);

            // Recalculate grade info.
            calculateOverallGrade();
            calculateOverallPercentagePoints();
            calculatePercentageComplete();
        }
    }//GEN-LAST:event_addChangesjButton5ActionPerformed

    private void assignmentTitlejTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_assignmentTitlejTextField1KeyReleased

    }//GEN-LAST:event_assignmentTitlejTextField1KeyReleased

    private void submitChangesToDBjButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitChangesToDBjButton2ActionPerformed
        try {
            // First, try deleting all info already in the database.
            String courseTitle = coursesComboBox.getSelectedItem().toString();
            String wholeSemester = semestersComboBox.getSelectedItem().toString();
            String semester = wholeSemester.substring(0, wholeSemester.indexOf(" "));
            int year = Integer.parseInt(wholeSemester.substring(wholeSemester.indexOf(" ") + 1));
            deleteFromAssignmentTableForClass(courseTitle, semester, year);

            // Then, try inserting everything that's already in the jlists.
            int courseID = getCourseID(courseTitle, semester, year);
            for (int i = 0; i < titleList.getItemCount(); i++) {
                addAssignment(titleList.getItem(i), Double.parseDouble(weightList.getItem(i)), Double.parseDouble(scoreList.getItem(i)), courseID);
            }
            JOptionPane.showMessageDialog(null, "Database was successfully updated.", "Success!", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "There was an error trying to delete/add grades: " + e, "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_submitChangesToDBjButton2ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (titleList.getSelectedIndex() != -1) {
            if (titleList.getItem(titleList.getSelectedIndex()).equals(assignmentTitlejTextField1.getText())) {
                editGradejPanel1.setVisible(false);
                weightjTextField2.setText("");
                assignmentTitlejTextField1.setText("");
                scoreReceivedjTextField3.setText("");
            }
            titleList.remove(titleList.getSelectedIndex());
            weightList.remove(weightList.getSelectedIndex());
            scoreList.remove(scoreList.getSelectedIndex());
            submitChangesToDBjButton2.setVisible(true);
        }

        // Recalculate percentage points, overall grade, and percent complete.
        calculateOverallGrade();
        calculateOverallPercentagePoints();
        calculatePercentageComplete();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void weightListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weightListMouseClicked
        if (weightList.getSelectedIndex() != -1) {
            editGradejPanel1.setVisible(true);
            titleList.select(weightList.getSelectedIndex());
            scoreList.select(weightList.getSelectedIndex());
            weightjTextField2.setText(weightList.getSelectedItem());
            assignmentTitlejTextField1.setText(titleList.getSelectedItem());
            scoreReceivedjTextField3.setText(scoreList.getSelectedItem());
        }
    }//GEN-LAST:event_weightListMouseClicked

    private void scoreListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scoreListMouseClicked
        if (scoreList.getSelectedIndex() != -1) {
            editGradejPanel1.setVisible(true);
            titleList.select(scoreList.getSelectedIndex());
            weightList.select(scoreList.getSelectedIndex());
            weightjTextField2.setText(weightList.getSelectedItem());
            assignmentTitlejTextField1.setText(titleList.getSelectedItem());
            scoreReceivedjTextField3.setText(scoreList.getSelectedItem());
        }
    }//GEN-LAST:event_scoreListMouseClicked

    private void titleListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_titleListActionPerformed

    }//GEN-LAST:event_titleListActionPerformed

    private void titleListFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_titleListFocusGained

    }//GEN-LAST:event_titleListFocusGained

    private void titleListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_titleListMouseClicked
        if (titleList.getSelectedIndex() != -1) {
            editGradejPanel1.setVisible(true);
            weightList.select(titleList.getSelectedIndex());
            scoreList.select(titleList.getSelectedIndex());
            weightjTextField2.setText(weightList.getSelectedItem());
            assignmentTitlejTextField1.setText(titleList.getSelectedItem());
            scoreReceivedjTextField3.setText(scoreList.getSelectedItem());
        }
    }//GEN-LAST:event_titleListMouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (jButton3.getText().equals("Add a New Grade")) {
            weightList.select(-1);
            scoreList.select(-1);
            titleList.select(-1);

            assignmentTitleTextField.setVisible(true);
            weightTextField.setVisible(true);
            scoreTextField.setVisible(true);

            jButton3.setText("Add");
            assignmentTitleTextField.setText("Assignment Title");
            weightTextField.setText("Weight (%)");
            scoreTextField.setText("Score (%)");
            infojLabel1.setVisible(true);

        } else if (gradeTitleDoesNotExist(assignmentTitleTextField.getText()) && stringIsANumber(weightTextField.getText()) && stringIsANumber(scoreTextField.getText())) {
            jButton3.setText("Add a New Grade");
            infojLabel1.setVisible(false);
            assignmentTitleTextField.setVisible(false);
            weightTextField.setVisible(false);
            scoreTextField.setVisible(false);

            titleList.add(assignmentTitleTextField.getText());
            weightList.add(weightTextField.getText());
            scoreList.add(scoreTextField.getText());

            // Recalculate percentage points, overall grade, and percent complete.
            calculateOverallGrade();
            calculateOverallPercentagePoints();
            calculatePercentageComplete();
            submitChangesToDBjButton2.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "Incorrect input! Weight, grade must be doubles. Title cannot already exist for some other assignment.", "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void canceljButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_canceljButton5ActionPerformed
        newClassjPanel2.setVisible(false);
        classNamejTextField1.setText("Class Name (max. 7 characters)");
        yearTakenjTextField1.setText("Year Taken (4 digits)");
        semesterTakenjTextField1.setText("Semester Taken");
        jButton4.setText("Add a Class");
        assignmentTitleTextField.setVisible(false);
        weightTextField.setVisible(false);
        scoreTextField.setVisible(false);
        assignmentTitleTextField.setText("Assignment Title");
        weightTextField.setText("Weight (%)");
        scoreTextField.setText("Score (%)");
        infojLabel1.setVisible(false);
        jButton3.setText("Add a New Grade");

        assumedGradejTextField2.setText("");
        desiredGradejTextField1.setText("");

        assignmentTitlejTextField1.setText("");
        weightjTextField2.setText("");
        scoreReceivedjTextField3.setText("");
        editGradejPanel1.setVisible(false);

        weightList.select(-1);
        scoreList.select(-1);
        titleList.select(-1);
    }//GEN-LAST:event_canceljButton5ActionPerformed

    private void semesterTakenjTextField1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_semesterTakenjTextField1FocusLost
        if (semesterTakenjTextField1.getText().equals("")) {
            semesterTakenjTextField1.setText("Semester Taken");
        }
    }//GEN-LAST:event_semesterTakenjTextField1FocusLost

    private void semesterTakenjTextField1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_semesterTakenjTextField1FocusGained
        if (semesterTakenjTextField1.getText().equals("Semester Taken")) {
            semesterTakenjTextField1.setText("");
        }
    }//GEN-LAST:event_semesterTakenjTextField1FocusGained

    private void yearTakenjTextField1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_yearTakenjTextField1FocusLost
        if (yearTakenjTextField1.getText().equals("")) {
            yearTakenjTextField1.setText("Year Taken (4 digits)");
        }
    }//GEN-LAST:event_yearTakenjTextField1FocusLost

    private void yearTakenjTextField1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_yearTakenjTextField1FocusGained
        if (yearTakenjTextField1.getText().equals("Year Taken (4 digits)")) {
            yearTakenjTextField1.setText("");
        }
    }//GEN-LAST:event_yearTakenjTextField1FocusGained

    private void classNamejTextField1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_classNamejTextField1FocusLost
        if (classNamejTextField1.getText().equals("")) {
            classNamejTextField1.setText("Class Name (max. 7 characters)");
        }
    }//GEN-LAST:event_classNamejTextField1FocusLost

    private void classNamejTextField1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_classNamejTextField1FocusGained
        if (classNamejTextField1.getText().equals("Class Name (max. 7 characters)")) {
            classNamejTextField1.setText("");
        }
    }//GEN-LAST:event_classNamejTextField1FocusGained

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (jButton4.getText().equals("Add a Class")) {
            newClassjPanel2.setVisible(true);
            jButton4.setText("Add");
        } else {
            if (classNamejTextField1.getText().contains(" ") || classNamejTextField1.getText().contains("-") || semesterTakenjTextField1.getText().contains(" ") || semesterTakenjTextField1.getText().contains("-")) {
                JOptionPane.showMessageDialog(null, "Incorrect input! Semester and course name taken cannot contain spaces, dashes, or hyphens.\nAcceptable semester examples: summer, FALL, Winter, fall_term_a", "Error!", JOptionPane.ERROR_MESSAGE);
                return;
            }
            try {
                Integer.parseInt(yearTakenjTextField1.getText());

                // Now try inserting into the database.
                try {
                    addCourse(classNamejTextField1.getText(), 3.0, semesterTakenjTextField1.getText(), Integer.parseInt(yearTakenjTextField1.getText()), finalGradeTextField.getText());

                    newClassjPanel2.setVisible(false);
                    jButton4.setText("Add Class");

                    coursesjPanel1.setVisible(true);
                    jButton3.setVisible(true);

                    // Place the semester taken in the combo box, if it isn't already there.
                    semestersComboBox.removeAllItems();
                    titleList.removeAll();
                    weightList.removeAll();
                    scoreList.removeAll();

                    ArrayList<String> semesters = getSemesters();
                    for (int i = 0; i < semesters.size(); i++) {
                        semestersComboBox.addItem(semesters.get(i));
                    }

                    jButton4.setText("Add a Class");
                    JOptionPane.showMessageDialog(null, "Course added successfully!\nTo save the course, click \"Submit Changes to Database\".", "Success!", JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Error adding course: " + e, "Error!", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Incorrect input! Year taken must be an integer.", "Error!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void classNameTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_classNameTextFieldFocusLost
        creditsTextField.requestFocusInWindow();
    }//GEN-LAST:event_classNameTextFieldFocusLost

    private void getAllSemestersAndCourses() {
        try {
            String sql = "SELECT title, semester_taken, year_taken FROM course;";
            try (Connection conn = connectToCollege();
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery(sql)) {

                // First, remove anything that was already there.
                classesComboBox.removeAllItems();

                // loop through the result set
                while (rs.next()) {
                    String title = rs.getString(1);
                    String semester = rs.getString(2);
                    int year = Integer.parseInt(rs.getString(3));
                    classesComboBox.addItem(title + " - " + semester + " " + year);
                }
                if (classesComboBox.getItemCount() == 0) {
                    deleteButton.setVisible(false);
                    editButton1.setVisible(false);
                }
                conn.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error trying to fetch course info: " + e);  // Show the exception message.
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error trying to fetch course info: " + ex);  // Show the exception message.
        }
    }

    public static String getAbsolutePath() {
        return (new File("").getAbsolutePath() + "/college.db").replace("\\", "/");
    }

    private int getCourseID(String title, String semester, int year) {
        String sql = "SELECT id FROM course WHERE title = '" + title + "' AND semester_taken = '" + semester + "' AND year_taken = " + year + ";";
        try (Connection conn = connectToCollege();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {

            // loop through the result set
            while (rs.next()) {
                return rs.getInt(1);
            }
            conn.close();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        JOptionPane.showMessageDialog(null, "There was an error trying to find the course id for course with title = " + title + ", semester taken = " + semester + ", and year taken = " + year, "Error!", JOptionPane.ERROR_MESSAGE);
        throw new Error("Could not find course id!");
    }

    public void getInfoAboutCourse(String title, String semester, int year) {
        try {
            String sql = "SELECT id, title, credits, semester_taken, year_taken, final_grade, requirement_satisfaction FROM course WHERE title = '" + title + "' AND semester_taken = '" + semester + "' AND year_taken = " + year + ";";
            try (Connection conn = connectToCollege();
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery(sql)) {

                // loop through the result set
                while (rs.next()) {
                    classNameTextField.setText(title);
                    creditsTextField.setText(rs.getString(3));
                    semesterTextField.setText(semester + " " + year);
                    finalGradeTextField.setText(rs.getString(6));
                }
                conn.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error trying to fetch course info: " + e);  // Show the exception message.
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error trying to fetch course info: " + ex);  // Show the exception message.
        }
    }

    public static Connection connectToCollege() {
        Connection conn = null;
        try {
            // db parameters
            String url = "jdbc:sqlite:" + getAbsolutePath();
            // create a connection to the database
            conn = DriverManager.getConnection(url);
            return conn;
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return null;
    }

    private double calculateQualityPoints(char letterGrade, double hours) {
        if (letterGrade == 'a' || letterGrade == 'A') {
            return hours * 4.0;
        } else if (letterGrade == 'b' || letterGrade == 'B') {
            return hours * 3.0;
        } else if (letterGrade == 'c' || letterGrade == 'C') {
            return hours * 2.0;
        } else if (letterGrade == 'd' || letterGrade == 'D') {
            return hours * 1.0;
        } else if (letterGrade == 'f' || letterGrade == 'F') {
            return hours * 0.0;
        } else { //Error.            
            throw new NumberFormatException();
        }
    }

    public static void addCourse(String title, double credits, String semesterTaken, int yearTaken, String finalGrade) throws SQLException {
        semesterTaken = semesterTaken.toUpperCase();
        title = title.toUpperCase();

        String url = "jdbc:sqlite:" + getAbsolutePath();

        String sql = "INSERT INTO course(title, credits, semester_taken, year_taken, final_grade) VALUES(?, ?, ?, ?, ?);";

        try (Connection conn = connectToCollege(); PreparedStatement pstmt = conn.prepareStatement(sql);) {
            //pstmt.setInt(1, id);
            pstmt.setString(1, title);
            pstmt.setDouble(2, credits);
            pstmt.setString(3, semesterTaken);
            pstmt.setInt(4, yearTaken);
            pstmt.setString(5, finalGrade);
            pstmt.executeUpdate();
            conn.close();
        }
    }

    // Check that the title does not already exist for the class.
    private boolean gradeTitleDoesNotExist(String title) {
        for (int i = 0; i < titleList.getItemCount(); i++) {
            if (i != titleList.getSelectedIndex() && titleList.getItem(i).equals(title)) {  // Title differs from all others in list (don't look at the title itself, obviously!)
                return false;
            }
        }
        return true;
    }

    private void deleteFromAssignmentTableForClass(String courseTitle, String semester, int year) {
        String url = "jdbc:sqlite:" + getAbsolutePath();

        String sql = "DELETE FROM assignment WHERE course_id = " + getCourseID(courseTitle, semester, year) + ";";

        try (Connection conn = connectToCollege(); PreparedStatement pstmt = conn.prepareStatement(sql);) {
            pstmt.executeUpdate();
            conn.close();
        } catch (SQLException e) {
            System.out.println(e);
        }
    }

    public static void addAssignment(String title, double weight, double grade, int courseID) {
        // SQLite connection string
        String url = "jdbc:sqlite:" + getAbsolutePath();

        String sql = "INSERT INTO assignment(title, weight, grade, course_id) VALUES(?, ?, ?, ?)";

        try (Connection conn = connectToCollege(); PreparedStatement pstmt = conn.prepareStatement(sql);) {
            // pstmt.setInt(1, id);
            pstmt.setString(1, title);
            pstmt.setDouble(2, weight);
            pstmt.setDouble(3, grade);
            pstmt.setInt(4, courseID);
            pstmt.executeUpdate();
            conn.close();
        } catch (SQLException e) {
            System.out.println(e);
        }
    }

    private boolean stringIsANumber(String number) {
        try {
            Double.parseDouble(number);
        } catch (NumberFormatException nfe) {
            return false;
        }
        return true;
    }

    private static ArrayList<String> getCoursesBySemester(String semester, int year) {
        String sql = "SELECT title FROM course WHERE semester_taken = '" + semester + "' AND year_taken = " + year + ";";
        ArrayList<String> courses = new ArrayList<String>();
        try (Connection conn = connectToCollege();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                courses.add(rs.getString(1));
            }
            conn.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error trying to fetch semesters from the database.", "Error!", JOptionPane.ERROR_MESSAGE);
        }
        return courses;
    }

    // Get all semesters that have assignment grades.
    public ArrayList<String> getSemesters() {
        String sql = "SELECT semester_taken, year_taken FROM course GROUP BY semester_taken, year_taken ORDER BY year_taken DESC;";
        ArrayList<String> semesters = new ArrayList<String>();
        try (Connection conn = connectToCollege();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {

            // loop through the result set
            while (rs.next()) {
                String semester = rs.getString(1) + " " + rs.getString(2);
                semesters.add(semester);
            }
            conn.close();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return semesters;
    }

    private double calculateOverallGrade() {
        double sum = 0.0;
        for (int i = 0; i < weightList.getItemCount(); i++) {
            sum += Double.parseDouble(weightList.getItem(i));
        }

        double pPoints = 0.0;
        for (int i = 0; i < weightList.getItemCount(); i++) {
            pPoints += Double.parseDouble(weightList.getItem(i)) * (Double.parseDouble(scoreList.getItem(i)) / 100.0);
        }
        currentGradeLabel.setText("Current grade: " + ((int) ((pPoints / sum) * 1000)) / 10.0);
        return (pPoints / sum) * 100.0;
    }

    private double calculateOverallPercentagePoints() {
        double pPoints = 0.0;
        for (int i = 0; i < weightList.getItemCount(); i++) {
            pPoints += Double.parseDouble(weightList.getItem(i)) * (Double.parseDouble(scoreList.getItem(i)) / 100.0);
        }
        percentagePointsLabel.setText("Percentage points earned: " + (int) (pPoints * 10) / 10.0);
        return pPoints;
    }

    private double calculatePercentageComplete() {
        double sum = 0.0;
        for (int i = 0; i < weightList.getItemCount(); i++) {
            sum += Double.parseDouble(weightList.getItem(i));
        }
        percentCompleteLabel.setText("Percent complete: " + (int) (sum * 10) / 10.0);
        return sum;
    }

    private static double getTotalCreditHours() {
        String sqlString = "SELECT sum(credits) FROM course WHERE final_grade = 'A' OR final_grade = 'B' OR final_grade = 'C' OR final_grade = 'D' OR final_grade = 'F';";
        try (Connection conn = connectToCollege();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sqlString)) {

            double totalCredits = 0;
            while (rs.next()) {
                totalCredits += rs.getDouble(1);
            }
            stmt.close();
            rs.close();
            conn.close();
            return totalCredits;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);  // Show the exception message.
            return 0.0;
        }
    }

    private static double getGPA() {
        String sqlString = "SELECT final_grade, credits FROM course;";
        try (Connection conn = connectToCollege();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sqlString)) {

            double totalCredits = 0.0;
            double qualityPoints = 0.0;
            while (rs.next()) {
                String grade = rs.getString(1);
                grade = grade.toUpperCase();
                double credits = rs.getDouble(2);
                if (grade.equals("A") || grade.equals("B") || grade.equals("C") || grade.equals("D") || grade.equals("F")) {  // These final grade types count towards GPA.
                    totalCredits += credits;
                }
                if (grade.equals("A")) {
                    qualityPoints += 4.0 * credits;
                } else if (grade.equals("B")) {
                    qualityPoints += 3.0 * credits;
                } else if (grade.equals("C")) {
                    qualityPoints += 2.0 * credits;
                } else if (grade.equals("D")) {
                    qualityPoints += 1.0 * credits;
                } else {
                    // no quality points earned
                }
            }
            stmt.close();
            rs.close();
            conn.close();
            return qualityPoints / totalCredits;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);  // Show the exception message.
            return 0.0;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAClassButton;
    private javax.swing.JButton addChangesjButton5;
    private javax.swing.JTextField assignmentTitleTextField;
    private javax.swing.JTextField assignmentTitlejTextField1;
    private javax.swing.JTextField assumedGradejTextField2;
    private javax.swing.JButton canceljButton5;
    private javax.swing.JTextField classNameTextField;
    private javax.swing.JTextField classNamejTextField1;
    private javax.swing.JComboBox<String> classesComboBox;
    private java.awt.TextField completedGPAHoursTextField2;
    private java.awt.TextField completedGPAHoursTextField3;
    private javax.swing.JComboBox<String> coursesComboBox;
    private javax.swing.JPanel coursesjPanel1;
    private javax.swing.JTextField creditsTextField;
    private java.awt.TextField currentGPATextField1;
    private java.awt.TextField currentGPATextField2;
    private javax.swing.JLabel currentGradeLabel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField desiredGradejTextField1;
    private javax.swing.JButton editButton1;
    private javax.swing.JButton editButton2;
    private javax.swing.JPanel editGradejPanel1;
    private javax.swing.JTextField finalGradeTextField;
    private javax.swing.JPanel gradesjPanel1;
    private java.awt.TextField hoursTextField1;
    private java.awt.TextField hoursTextField10;
    private java.awt.TextField hoursTextField11;
    private java.awt.TextField hoursTextField12;
    private java.awt.TextField hoursTextField2;
    private java.awt.TextField hoursTextField3;
    private java.awt.TextField hoursTextField4;
    private java.awt.TextField hoursTextField5;
    private java.awt.TextField hoursTextField6;
    private java.awt.TextField hoursTextField7;
    private java.awt.TextField hoursTextField8;
    private java.awt.TextField hoursTextField9;
    private javax.swing.JLabel infojLabel1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private java.awt.Label label10;
    private java.awt.Label label11;
    private java.awt.Label label12;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Label label5;
    private java.awt.Label label6;
    private java.awt.Label label7;
    private java.awt.Label label8;
    private java.awt.Label label9;
    private java.awt.TextField letterGradeTextField1;
    private java.awt.TextField letterGradeTextField10;
    private java.awt.TextField letterGradeTextField11;
    private java.awt.TextField letterGradeTextField12;
    private java.awt.TextField letterGradeTextField2;
    private java.awt.TextField letterGradeTextField3;
    private java.awt.TextField letterGradeTextField4;
    private java.awt.TextField letterGradeTextField5;
    private java.awt.TextField letterGradeTextField6;
    private java.awt.TextField letterGradeTextField7;
    private java.awt.TextField letterGradeTextField8;
    private java.awt.TextField letterGradeTextField9;
    private javax.swing.JPanel newClassjPanel2;
    private javax.swing.JLabel percentCompleteLabel;
    private javax.swing.JLabel percentagePointsLabel;
    private java.awt.List scoreList;
    private javax.swing.JTextField scoreReceivedjTextField3;
    private javax.swing.JTextField scoreTextField;
    private javax.swing.JTextField semesterTakenjTextField1;
    private javax.swing.JTextField semesterTextField;
    private javax.swing.JComboBox<String> semestersComboBox;
    private javax.swing.JButton submitChangesToDBjButton2;
    private java.awt.List titleList;
    private java.awt.List weightList;
    private javax.swing.JTextField weightTextField;
    private javax.swing.JTextField weightjTextField2;
    private javax.swing.JTextField yearTakenjTextField1;
    // End of variables declaration//GEN-END:variables
}
